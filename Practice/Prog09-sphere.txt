//
//  main.cpp
//  cgPractice
//
//  Created by 이준호 on 2018. 4. 10..
//  Copyright © 2018년 Taristmas. All rights reserved.
//

#include <GLUT/GLUT.h>
#include <iostream>
#include <math.h>

static int delay =1;                     //milliseconds


void timer(int t){
    glutPostRedisplay();                    // 현재 윈도우 새로고침
    glutTimerFunc(delay, timer, t);         // 타이머 재설정
}

void init()
{
    glClearColor (1.0, 1.0, 1.0, 1.0);
    glColor3f    (1.0, 0.0, 0.0);
    glOrtho      (-2.0, 2.0, -2.0, 2.0, -2.0, 2.0); // define 3D clipping volume
    //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);


    

}

void display()
{
    float phi, theta;                   // 파이, 세타
    float phir, phir20, thetar;         //
    float PI=atan(1.0)*4;               // 파이
    float c = PI/180.0;                 // 라디안값 만들기위한
    float x,y,z;                        // 좌표
    
//    glClear(GL_COLOR_BUFFER_BIT); // 얘가 실제로 컬러버퍼를 glClearColor 로 정한 색으로 채움
    glClear( GL_COLOR_BUFFER_BIT  ); // add GL_DEPTH_BUFFER_BIT
    
    for(phi=-80;phi<=80;phi+=10.0){     // 위도에 대해서
        phir = c*phi;                   // 라디안에 사이 위도 값 곱함.
        phir20 = c*(phi+20);            // 20도 뒤의 값
        
        glBegin(GL_QUAD_STRIP);         // 꼭다리 말고부분
        
        for(theta=-180;theta<=180.0;theta+=10.0){       // 경도에 대해서
            glColor3f(fabs(theta)/180,0.0,0.0);         // fabs - 부동소숫점 절대값 연산
            
            thetar = c*theta;                           // 각도는 라디안 곱하기 경도 각도
            x=sin(thetar)*cos(phir);
            y=cos(thetar)*cos(phir);
            z=sin(phir);
            glVertex3f(x,y,z);                          // 그리기
            
            x=sin(thetar)*cos(phir20);
            y=cos(thetar)*cos(phir20);
            z=sin(phir);
            glVertex3f(x,y,z);                          // 그리기
            
        }
        
        glEnd();
    }
    
    float c80=c*80.0;
    
    glBegin(GL_TRIANGLE_FAN);
    glVertex3f(0.0,0.0,1.0);
    z=sin(c80);
    
    for(theta=-180.0; theta<=180.0;theta+=10.0){
        glColor3f(fabs(theta)/180, 0.0,0.0);
        
        thetar = c*theta;
        x=sin(thetar)*cos(c80);
        y=cos(thetar)*cos(c80);
        glVertex3f(x,y,z);
        
    }
    glEnd();
    
    glBegin(GL_TRIANGLE_FAN);
    glVertex3f(0.0,0.0,-1.0);
    z=-sin(c80);

    for(theta=-180.0;theta<=180.0;theta+=10.0){
        glColor3f(fabs(theta)/180, 0.0, 0.0);

        thetar = c*theta;
        x=sin(thetar)*cos(c80);
        y=cos(thetar)*cos(c80);
        glVertex3f(x,y,z);
    }
    glEnd();
    
    
    glFlush();
}

int main(int argc, char* argv[])
{
    glutInit(&argc, argv);
    glutInitDisplayMode( GLUT_SINGLE | GLUT_RGB ); // add display mode to enable depth test
    glutInitWindowSize(500, 500);
    glutCreateWindow("Prog09: Sphere");
    glutDisplayFunc(display);
//    glutTimerFunc(delay,timer,0);
    init();
    glutMainLoop();
    
    return 0;
}
